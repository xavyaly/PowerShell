# profile.ps1: CREATED IN DOCUMENT FOLDER TO CHANG THE DEFAULT WORK LOCATION
# 
# Pre-Requisites: Compname, App Name, Userid, Password, URL
#
#$URL = "https://ucd.prodlb.travp.net/"
$URL = "https://ucd-sandbox.dvllb.travp.net/"
$compName = "BI_SCBP_BIRatingModsUI_Comp"
#$compName = "BI_BIUP_SCBP_BIRatingModsUI_BIRatingModsEAR_App"
$compPath = "C:\Users\jalam4\Travelers\Final_Automation\comp"
cmd /c udclient -username jalam4 -password AbNa@234566 -weburl $URL getComponent -component $compName > $compPath
$compID = (Get-Content -Path $compPath -Raw) | ConvertFrom-Json 
$compID.psobject.Properties.Value[16] > $compPath
$compIDs = Get-Content $compPath
$compIDs
#
#
$envPropDef = (Get-Content 11172017envName)
foreach($envPD in $envPropDef) {
    cmd /c udclient -username jalam4 -password ********* -weburl $URL addEnvironmentProperty -name $envPD -component $compIDs -required true -description $envPD 
}
#
#
$URL = "https://ucd.prodlb.travp.net/"
$appName = "BI_BIUP_SCBP_BIRatingModsUI_BIRatingModsEAR_App"
rm $appPath
cmd /c udclient -username jalam4 -password ********* -weburl $URL getEnvironment -application $appName -environment MO > $appPath
$appID = (Get-Content -Path $appPath -Raw) | ConvertFrom-Json 
$appID.psobject.Properties.Value[8] > $appPath
$appIDs = Get-Content $appPath
$appIDs
#               
#
$envPropDef = (Get-Content 11172017envName)
$a = $envPropDef.Length
$setCompEnvPro = (Get-Content 11172017envValue)
if ($envPropDef.Length -eq $setCompEnvPro.Length) { Write-Host "Strings have equal length" }
for ($i=0; $i -le $a-1; $i++) {
    Write-Host $envPropDef[$i] => $setCompEnvPro[$i]
    cmd /c udclient -username jalam4 -password ******* -weburl $URL setComponentEnvironmentProperty -name $envPropDef[$i] -value $setCompEnvPro[$i] -component $compName -environment $appIDs -application $appName
}

<#
PS C:\Users\jalam4\Travelers\Final_Automation\udclient\udclient> C:\Users\jalam4\Travelers\Final_Automation\Codes\Final_Testing.ps1
Operation succeeded.
Operation succeeded.
Operation succeeded.
Operation succeeded.
Operation succeeded.
Operation succeeded.
Operation succeeded.
Operation succeeded.
Operation succeeded.
Operation succeeded.
Operation succeeded.
Operation succeeded.
Operation succeeded.
Operation succeeded.
Strings have equal length
env.dataSource.oracle.URL => jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=oradawcratmod001.prodlb.travp.net)(PORT=1606)))(CONNECT_DATA=(SERVICE_NAME=epsbdv_oltp)))
{
  "id": "15fb799d-5e86-64cd-c07a-91e9844296e2",
  "name": "env.dataSource.oracle.URL",
  "value": "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=oradawcratmod001.prodlb.travp.net)(PORT=1606)))(CONNECT_DATA=(SERVICE_NAME=epsbdv_oltp)))",
  "secure": false
}

env.dataSource.oracle.user => WCRM_APPUSER_LB1
{
  "id": "15fb799e-c079-58a2-52a3-fbc88d2dd59f",
  "name": "env.dataSource.oracle.user",
  "value": "WCRM_APPUSER_LB1",
  "secure": false
}

env.dataSource.oracle.password => WCRMappLB1
{
  "id": "15fb79a0-2b8e-aadc-cc7b-8a3d9254ef44",
  "name": "env.dataSource.oracle.password",
  "value": "WCRMappLB1",
  "secure": false
}

env.jmsQueueConnectionFactory.TMQCFA.channel => A4214.QCTA.SCY.2
{
  "id": "15fb79a1-8c33-d91d-d75f-a1e012020ec2",
  "name": "env.jmsQueueConnectionFactory.TMQCFA.channel",
  "value": "A4214.QCTA.SCY.2",
  "secure": false
}

env.jmsQueueConnectionFactory.TMQCFA.hostName => mqqcta.prodlb.travp.net
{
  "id": "15fb79a2-e1dd-178c-b5ae-dd5969ba22b9",
  "name": "env.jmsQueueConnectionFactory.TMQCFA.hostName",
  "value": "mqqcta.prodlb.travp.net",
  "secure": false
}

env.jmsQueueConnectionFactory.TMQCFA.port => 1414
{
  "id": "15fb79a4-4978-3510-6f9b-ec3ab1707529",
  "name": "env.jmsQueueConnectionFactory.TMQCFA.port",
  "value": "1414",
  "secure": false
}

env.jmsQueueConnectionFactory.TMQCFA.password => 8SgyU3qk
{
  "id": "15fb79a5-9909-6426-ccf2-6a2adbdd9be1",
  "name": "env.jmsQueueConnectionFactory.TMQCFA.password",
  "value": "8SgyU3qk",
  "secure": false
}

env.jmsQueueConnectionFactory.TMQCFA.queueManager	 => QCTA
{
  "id": "15fb79a6-e401-105c-5cb9-9450d345b967",
  "name": "env.jmsQueueConnectionFactory.TMQCFA.queueManager\t",
  "value": "QCTA",
  "secure": false
}

env.jmsQueueConnectionFactory.TMQCFA.transportType => CLIENT
{
  "id": "15fb79a8-3e6d-2435-d79f-be7d66256404",
  "name": "env.jmsQueueConnectionFactory.TMQCFA.transportType",
  "value": "CLIENT",
  "secure": false
}

env.jmsQueueConnectionFactory.TMQCFA.userName => s4214qt
{
  "id": "15fb79a9-a8e1-1bf6-a518-19b6ec16130d",
  "name": "env.jmsQueueConnectionFactory.TMQCFA.userName",
  "value": "s4214qt",
  "secure": false
}

env.jmsQueue.TMWorkItemQueue.baseQueueManagerName => TMWorkItemQueue
{
  "id": "15fb79ab-0d7f-20cc-4ac8-438b882a4d69",
  "name": "env.jmsQueue.TMWorkItemQueue.baseQueueManagerName",
  "value": "TMWorkItemQueue",
  "secure": false
}

env.jmsQueue.TMWorkItemQueue.baseQueueName => A4214QL.BISCBPLBS.TM.WORKMGMTENDORSEVENTS
{
  "id": "15fb79bf-1a9c-94f0-361e-0d148c8515e9",
  "name": "env.jmsQueue.TMWorkItemQueue.baseQueueName",
  "value": "A4214QL.BISCBPLBS.TM.WORKMGMTENDORSEVENTS",
  "secure": false
}

env.authData.TMQueueCredentials.user => s4214qt
{
  "id": "15fb79ae-2db9-d3c2-c5a0-3f51a3712af6",
  "name": "env.authData.TMQueueCredentials.user",
  "value": "s4214qt",
  "secure": false
}

env.authData.TMQueueCredentials.password => 8SgyU3qk
{
  "id": "15fb79af-b567-1a36-de11-59f31fc4c559",
  "name": "env.authData.TMQueueCredentials.password",
  "value": "8SgyU3qk",
  "secure": false
}


PS C:\Users\jalam4\Travelers\Final_Automation\udclient\udclient> #>










$serverFile = [System.IO.File]::OpenText("server.txt")

$xl=New-Object -ComObject Excel.Application
$wb=$xl.WorkBooks.Open('C:\Users\lchavhan\output.xls')
$ws=$wb.WorkSheets.item(1)
$ws.Cells.Item(1, 1) = "Softwares"
$ws.Cells.Item(1,1).Font.Name = "Times New Roman"

try {

       $col = 1 
       $count = 0
        for() {
                $server = $serverFile.ReadLine()
                if ($server -eq $null) { break }
                
                $row = 1
                $col = $col + 1
                $ws.Cells.Item($row, $col) = $server
                $ws.Cells.Item($row, $col).Font.Name = "Times New Roman"

                $testSession = New-PSSession -Computer $server
                $xl.Visible=$true

                $row = $row + 1
                if(($testSession))
                           {
                                  $softFile = [System.IO.File]::OpenText("software.txt")
                                  try {
                                                
                                                for()
                                                {
                                $soft = $softFile.ReadLine()
                                if ($soft -eq $null) { 
                                    break
                                }

                                if($count -eq 0)
                                {
                                    $ws.Cells.Item($row,1)=$soft
                                    $xl.Visible=$true
                                    $ws.Cells.Item($row, 1).Font.Name = "Times New Roman"
                                }
                
                   
                                                       $Result = Get-WMIObject Win32_Installedwin32Program -Computer $server | Select-Object Name  

                                                       if($Result.Name -eq $soft)
                                                       {
                                                              $xl.Visible=$true
                                                              $ws.Cells.Item($row,$col)="Yes"
                                    $ws.Cells.Item($row, $col).Font.Name = "Times New Roman"
                                    $row = $row + 1
                                                              write-host "Yes"
                   
                                                       }
                                                       else
                                                       {
                                                              $xl.Visible=$true
                                                              $ws.Cells.Item($row,$col)="No"
                                    $ws.Cells.Item($row, $col).Font.Name = "Times New Roman"
                                                              $row = $row + 1
                                                              write-host "No"
                                                       }
                
                                                }
                        $count = 1
                                         exit-PSSession
                    }      

                finally {
                
                    $softFile.Close()
                    }
    
           }
                 else
                 {
                           exit-PSSession
                                    
                                                              $xl.Visible=$true
                                                              $ws.Cells.Item($row,$col)="Login Failed"
                                    $ws.Cells.Item($row, $col).Font.Name = "Times New Roman"
                                                              $row = $row + 1
                 }
              }
               
    }

       finally {
        
        $serverFile.Close()
} 




---
general:
  portfolio_name: OMP
  application_name: SCBP
  project_path: RlsPth
  project_name: IAAS_Pipeline
  job_name: BIOMP_SCBP_BIRatingMods_wlp_pipeline
  release_month: Feb2018
jenkins:
  node: TCCIDVWC
  scm:
    svnurl1: http://scm.prodlb.travp.net/cl/biratingmods/trunk/source
    localcheckoutdirectory1: ./
    svnurl2: http://scm.prodlb.travp.net/cl/biratingmods/CORE_BUILD_SCRIPTS
    localcheckoutdirectory2: ./CORE_BUILD_SCRIPTS
    svnurl3: http://scm.prodlb.travp.net/cl/biratingmods/trunk/bin/serverRuntime/BIRMServer
    localcheckoutdirectory3: ./bin
    polling: 'disable'
    schedule1: ''
    schedule2: ''
  Batcmd:
    enable: false
    dir: ''
    cmd1: ''
    cmd2: ''
  build:
    buildtechnology: ant
    antversion: Ant1.8.2-Windows
    buildfilepath: ./BIRatingModsEAR/ant_BIRatingModsEAR_build.xml
    targets: init clean prepare subbuild ear
    jdkversion: IBM-SDK-1.8_Windows
    buildproperties: 
    - '-DbuildNumber=$BUILD_NUMBER'
    - '-Dworkspace=%WORKSPACE%'
    - '-Dhudson.home=D:\\Slave\\Jenkins'
    - '-Dproject.name=$JOB_NAME'
    - '-DJAVA.HOME=$JAVA_HOME'
    - '-Dsvn.revision=$SVN_REVISION'
    - '-Denv.was.runtime.dir=D:\\Slave\\Jenkins\\Admin\\Tools\\wlp-javaee7-17.0.0.2'
    - '-DCORE_BUILD_SCRIPTS=%WORKSPACE%\\CORE_BUILD_SCRIPTS'
  unittests:
    enable: 'false'
    jdkversion: IBM-SDK-1.8_Windows
    antversion: Ant1.8.2-Windows
    buildfilepath: 
    targets: 
    buildproperties: 
  gates:
    enable: 'true'
    junit: disable
    jacoco: disable
    pmd: enable
    clover: disable
    cloverReportDir:
  copyartifacts:
    enable: 'false'
    source0: 
    destination0: 
    source1: 
    destination1: 
    source2: 
    destination2:
    source3:
    destination3:
    source4:
    destination4:
  deploy_DI:
    enable: 'false'
    ucdserver: UCD Production BI
    ucd_application_name: BI_BIUP_SCBP_BIRatingModsUI_BIRatingModsEAR_App
    ucd_environment_name: DI
    ucd_deploy_process: BI_BIUP_SCBP_BIRatingModsUI_BIRatingModsEAR_Aproc
    liberty: 'false'
    DestinationFolderLiberty:
    SourceFolderLiberty:
    DestinationFileLiberty:
    BuildDisplayNameLiberty:
    component:
      ucd_component_name: BI_SCBP_BIRatingModsUI_Comp
      base_artifact_directory: bin
      version: FEB2018
      include: '**/*'
      exclude: ''
      skip_publishing: 'false'
  CIT_DI:
   enable: 'false'
   ENV:
   CIT_Jenkins_Job0:
   TestType0: 
  EmailNotify:
   EmailRecipients: 'BlackHawks_BI_RightSpeed_IT@travelers.com,kkulothu@travelers.com,nmorampu@travelers.com,brath2@travelers.com,jalam4@travelers.com,SMUTHUP4@travelers.com,PPANDIYA@travelers.com,LSOMASU3@travelers.com,VJAYASRE@travelers.com,SMOOTHE3@travelers.com,SSHINDE@travelers.com,KMANIKAN@travelers.com,MRSHAH@travelers.com,GBANGARU@travelers.com'
   
   
   
   
   
   
   //*************************************************************************
//Template Script for Java->ANT Pipeline Job test Template
//Please check with RBARATHY@travelers.com before updating
//*************************************************************************
node ('TCCIDVWC') {

	stage 'Checkout'
				checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[credentialsId: 'SVN-Credentials', depthOption: 'infinity', ignoreExternalsOption: true, local: './', remote: 'http://scm.prodlb.travp.net/cl/sc_scbp_svnlite/branches/Default1_Feb18/Components/WCRMCommon/source/java']], workspaceUpdater: [$class: 'UpdateUpdater']]) 
				def definition = readYaml(file: './deliverydefinition.yml')
		try{
			if("${definition.jenkins.scm.svnurl2}"!='null') {
				checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[credentialsId: 'SVN-Credentials', depthOption: 'infinity', ignoreExternalsOption: true, local: "${definition.jenkins.scm.localcheckoutdirectory2}", remote: "${definition.jenkins.scm.svnurl2}"]], workspaceUpdater: [$class: 'UpdateUpdater']]) 				
			}
			if("${definition.jenkins.scm.svnurl3}"!='null') {
				checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[credentialsId: 'SVN-Credentials', depthOption: 'infinity', ignoreExternalsOption: true, local: "${definition.jenkins.scm.localcheckoutdirectory3}", remote: "${definition.jenkins.scm.svnurl3}"]], workspaceUpdater: [$class: 'UpdateUpdater']])
			}
			if("${definition.jenkins.scm.svnurl4}"!='null') {
				checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[credentialsId: 'SVN-Credentials', depthOption: 'infinity', ignoreExternalsOption: true, local: "${definition.jenkins.scm.localcheckoutdirectory4}", remote: "${definition.jenkins.scm.svnurl4}"]], workspaceUpdater: [$class: 'UpdateUpdater']])
			}
			if("${definition.jenkins.scm.svnurl5}"!='null') {
				checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[credentialsId: 'SVN-Credentials', depthOption: 'infinity', ignoreExternalsOption: true, local: "${definition.jenkins.scm.localcheckoutdirectory5}", remote: "${definition.jenkins.scm.svnurl5}"]], workspaceUpdater: [$class: 'UpdateUpdater']])
			}
			if("${definition.jenkins.scm.svnurl6}"!='null') {
				checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[credentialsId: 'SVN-Credentials', depthOption: 'infinity', ignoreExternalsOption: true, local: "${definition.jenkins.scm.localcheckoutdirectory6}", remote: "${definition.jenkins.scm.svnurl6}"]], workspaceUpdater: [$class: 'UpdateUpdater']])
			}
			if("${definition.jenkins.scm.svnurl7}"!='null') {
				checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[credentialsId: 'SVN-Credentials', depthOption: 'infinity', ignoreExternalsOption: true, local: "${definition.jenkins.scm.localcheckoutdirectory7}", remote: "${definition.jenkins.scm.svnurl7}"]], workspaceUpdater: [$class: 'UpdateUpdater']])
			}
			if("${definition.jenkins.scm.svnurl8}"!='null') {
				checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, ignoreDirPropChanges: false, includedRegions: '', locations: [[credentialsId: 'SVN-Credentials', depthOption: 'infinity', ignoreExternalsOption: true, local: "${definition.jenkins.scm.localcheckoutdirectory8}", remote: "${definition.jenkins.scm.svnurl8}"]], workspaceUpdater: [$class: 'UpdateUpdater']])
			}
			def Release = "${definition.general.release_month}"
			def UCDEnv = "${definition.jenkins.deploy.ucd_environment_name}" 
			def service = "${definition.general.job_name}"
			def emailto = "${definition.general.emailto}"
			env.service = "${service}"
			env.release = "${Release}"
			env.UCDEnv =  "${UCDEnv}"
			env.emailto = "${emailto}"
			def buildstatus = "SUCCESS"
			env.buildstatus = "SUCCESS"
		} catch (e) {
				currentBuild.result = "FAILED"
				notifyFailed('Checkout')
				throw e
			
		}
		
	stage 'Build'
		try{
			echo "Build Stage Begins"
			
				env.JAVA_HOME=tool name: "${definition.jenkins.build.jdkversion}", type: 'jdk'
				env.ANT_HOME=tool name: "${definition.jenkins.build.antversion}", type: 'ant'
				echo "${env.ANT_HOME}"
                echo "${env.JAVA_HOME}"
			
		if(isUnix()) {
					def temp = "${definition.jenkins.build.buildproperties}".substring(1, "${definition.jenkins.build.buildproperties}".length() -1)
					def build_properties = temp.replaceAll(',','')
					withEnv(["PATH=${JAVA_HOME}/bin:${ANT_HOME}/bin:${PATH}"]) {
					echo "{build_properties}"
					sh "ant  -file=${definition.jenkins.build.buildfilepath} -Dbuild.target=${definition.jenkins.build.targets} -DJAVA.HOME=\"${JAVA_HOME}\" -Dworkspace=${WORKSPACE} ${build_properties}"
						}
						}
				 else {
					def temp = "${definition.jenkins.build.buildproperties}".substring(1, "${definition.jenkins.build.buildproperties}".length() -1)
					def build_properties = temp.replaceAll(',','')
					withEnv(["PATH=D:/Slave/Jenkins/admin/tools;${env.JAVA_HOME}/bin;${env.ANT_HOME}/bin;${PATH}"]) {
					bat "ant  -file=${definition.jenkins.build.buildfilepath} ${definition.jenkins.build.targets} -DJAVA.HOME=\"${JAVA_HOME}\" -Dworkspace=${WORKSPACE} ${build_properties}"
					}
				}			
			}	

			catch (e) {
				currentBuild.result = "FAILED"
				notifyFailed('Build')
				throw e
			}	
			
	if ("${definition.jenkins.unittests.enable}" == "true")
	{
	stage 'UnitTest'
		try{
			echo "UnitTest Stage Begins"
			if(isUnix()) {
					def temp = "${definition.jenkins.unittests.buildproperties}".substring(1, "${definition.jenkins.unittests.buildproperties}".length() -1)
					def build_properties = temp.replaceAll(',','')
					withEnv(["PATH=${JAVA_HOME}/bin:${ANT_HOME}/bin:${PATH}"]) {
					echo "{build_properties}"
					sh "ant  -file=${definition.jenkins.unittests.buildfilepath} -Dbuild.target=${definition.jenkins.unittests.targets} -DJAVA.HOME=\"${JAVA_HOME}\" -Dworkspace=${WORKSPACE} ${build_properties}"
					}
			}
				 else {
					def temp = "${definition.jenkins.unittests.buildproperties}".substring(1, "${definition.jenkins.unittests.buildproperties}".length() -1)
					def build_properties = temp.replaceAll(',','')
					withEnv(["PATH=${JAVA_HOME}/bin;${ANT_HOME}/bin;${PATH}"]) {
					bat "ant  -file=${definition.jenkins.unittests.buildfilepath} ${definition.jenkins.unittests.targets} -DJAVA.HOME=\"${JAVA_HOME}\" -Dworkspace=${WORKSPACE} ${build_properties}"
					}
				}
				
				if(currentBuild.result == "FAILURE")
			{
					if(isUnix()) 
					 { 
						sh 'exit /b 1'
					 }
					else
					{ 
						bat 'exit /b 1'
					}
			}

		  }catch (e) {
				currentBuild.result = "FAILED"
				notifyFailed('UnitTest')
				throw e
		}
	}

	// ************************ Quality Gates Stage Begins Here ********************
	if ("${definition.jenkins.gates.enable}" == "true")
	{
	stage 'Quality Gates'
		try{
			echo "Quality Gates Stage Begins"
			if("${definition.jenkins.gates.junit}" == "enable") {
			echo "Build Gate: Publishing Test Results!"
			junit healthScaleFactor: 10.0, testResults: './buildAutomation/reports/JunitReports/*.xml'	
			}
			
			if("${definition.jenkins.gates.pmd}" == "enable") {
			echo "Pre-Build Gate: Publishing PMD Results!"
			step([$class: 'PmdPublisher', canComputeNew: false, canRunOnFailed: true, defaultEncoding: '', failedTotalHigh: '10', failedTotalLow: '150', failedTotalNormal: '150', healthy: '', pattern: '**/*_pmd_report.xml', shouldDetectModules: true, unHealthy: ''])
			}
			
			if("${definition.jenkins.gates.cpd}" == "enable") {
			echo "Pre-Build Gate: Publishing CPD Results!"
			dry canComputeNew: false, defaultEncoding: '', failedTotalHigh: '10', failedTotalLow: '100', failedTotalNormal: '100', healthy: '', pattern: '**/*_cpd.xml', unHealthy: ''
			}
			
			if("${definition.jenkins.gates.jacoco}" == "enable") {
			echo "Build Gate: Publishing JaCoCo Coverage Results!"
			jacoco buildOverBuild: true, changeBuildStatus: true, maximumBranchCoverage: '55', maximumClassCoverage: '55', maximumComplexityCoverage: '55', maximumInstructionCoverage: '55', maximumLineCoverage: '55', maximumMethodCoverage: '55', skipCopyOfSrcFiles: true
			}
			
			if("${definition.jenkins.gates.clover}" == "enable") {			
			step([$class: 'CloverPublisher', cloverReportFileName: 'clover.xml', failingTarget: [], healthyTarget: [conditionalCoverage: 80, methodCoverage: 70, statementCoverage: 80], unhealthyTarget: []])
			}
			
			if(currentBuild.result == "FAILURE")
			{
					if(isUnix()) 
					 { 
						sh 'exit /b 1'
					 }
					else
					{ 
						bat 'exit /b 1'
					}
			}
			
		  }catch (e) {
				currentBuild.result = "FAILED"
				notifyFailed('Quality Gates')
				throw e
		}	
	
	}
	else if ("${definition.jenkins.gates.enable}" == "false")
		{
		stage 'Quality Gates'
		echo "No Quality Gates are enabled for this project"
		}

	if ("${definition.jenkins.deploy.enable}" == "true")
	{
		stage 'Deploy'
			echo "Deploy Stage Begins"
			
			
			if ("${definition.jenkins.deploy.liberty}" == "true") 
			{
				if ("${definition.jenkins.deploy.deploy}" == "true")
				{
				echo "Deploy Stage Begins for Liberty Project"
				archiveArtifacts artifacts: "${definition.jenkins.deploy.SourceFolderLiberty}/**/*.*", caseSensitive: true, defaultExcludes: false, fingerprint: true
				//archive "${definition.jenkins.deploy.component1.base_artifact_directory}/**", fingerprint: true
				build job: 'BIDOPS/LibertyPrePostBuildActivity-Pipeline', parameters: [string(name: 'workspace', value: "$WORKSPACE"), string(name: 'dest.folder', value: "D:\\Slave\\Jenkins\\workspace\\BIDOPS\\LibertyPrePostBuildActivity-Pipeline\\${definition.jenkins.deploy.DestinationFolderLiberty}"),string(name: 'dest.file', value: "${definition.jenkins.deploy.DestinationFileLiberty}"),string(name: 'src.folder', value: "D:\\Slave\\Jenkins\\workspace\\BIDOPS\\LibertyPrePostBuildActivity-Pipeline\\${definition.jenkins.deploy.SourceFolderLiberty}"),string(name: 'CompName', value: "${definition.jenkins.deploy.component1.ucd_component_name}"),string(name: 'Version', value: "${definition.jenkins.deploy.component1.version}_$BUILD_NUMBER"),string(name: 'AppName', value: "${definition.jenkins.deploy.ucd_application_name}"),string(name: 'EnvName', value: "${definition.jenkins.deploy.ucd_environment_name}"),string(name: 'AppProcName', value: "${definition.jenkins.deploy.ucd_deploy_process}"),string(name: 'Build.Display.Name', value: "${definition.jenkins.deploy.BuildDisplayNameLiberty}_B$BUILD_NUMBER"),string(name: 'Versionname', value: "${definition.jenkins.deploy.component1.version}_$BUILD_NUMBER"),string(name: 'Job_Name', value: "$JOB_NAME")] 
				}
			
				else
				{
				echo "Deploy Stage Begins for Liberty Project"
				archiveArtifacts artifacts: "${definition.jenkins.deploy.SourceFolderLiberty}/**/*.*", caseSensitive: true, defaultExcludes: false, fingerprint: true
				//archive "${definition.jenkins.deploy.component1.base_artifact_directory}/**", fingerprint: true
				build job: 'BIDOPS/LibertyPrePostBuildActivity-Pipeline', parameters: [string(name: 'workspace', value: "$WORKSPACE"), string(name: 'dest.folder', value: "D:\\Slave\\Jenkins\\workspace\\BIDOPS\\LibertyPrePostBuildActivity-Pipeline\\${definition.jenkins.deploy.DestinationFolderLiberty}"),string(name: 'dest.file', value: "${definition.jenkins.deploy.DestinationFileLiberty}"),string(name: 'src.folder', value: "D:\\Slave\\Jenkins\\workspace\\BIDOPS\\LibertyPrePostBuildActivity-Pipeline\\${definition.jenkins.deploy.SourceFolderLiberty}"),string(name: 'CompName', value: "${definition.jenkins.deploy.component1.ucd_component_name}"),string(name: 'Version', value: "${definition.jenkins.deploy.component1.version}_$BUILD_NUMBER"),string(name: 'AppName', value: "${definition.jenkins.deploy.ucd_application_name}"),string(name: 'EnvName', value: "${definition.jenkins.deploy.ucd_environment_name}"),string(name: 'AppProcName', value: "${definition.jenkins.deploy.ucd_deploy_process}"),string(name: 'Build.Display.Name', value: "${definition.jenkins.deploy.BuildDisplayNameLiberty}_B$BUILD_NUMBER"),string(name: 'Versionname', value: "${definition.jenkins.deploy.component1.version}_$BUILD_NUMBER"),string(name: 'Job_Name', value: "$JOB_NAME")] 
				}
			 }
			else 
			{
			
			echo "Deploy Stage Begins for Non Liberty Project"
					if ("${definition.jenkins.deploy.deploy}" == "true")
					{
				echo "Enabling Autodeployment"
				//archiveArtifacts artifacts: "${definition.jenkins.deploy.component1.base_artifact_directory}/**/*", caseSensitive: true, defaultExcludes: false, fingerprint: true
				archiveArtifacts artifacts: "${definition.jenkins.deploy.component1.base_artifact_directory}/**/*", fingerprint: true
				//archive "${definition.jenkins.deploy.component1.base_artifact_directory}/**"
				build job: 'LSF/Deploy_Liberty', parameters: [string(name: 'workspace', value: "$WORKSPACE"), string(name: 'app_svn', value: "${definition.jenkins.scm.svnurl1}"), string(name: 'CompName', value: "${definition.jenkins.deploy.component1.ucd_component_name}"), string(name: 'Version', value: "${definition.jenkins.deploy.component1.version}"), string(name: 'AppName', value: "${definition.jenkins.deploy.ucd_application_name}"), string(name: 'EnvName', value: "${definition.jenkins.deploy.ucd_environment_name}"), string(name: 'AppProcName', value: "${definition.jenkins.deploy.ucd_deploy_process}"), string(name: 'include', value: "${definition.jenkins.deploy.component1.include}"), string(name: 'exclude', value: "${definition.jenkins.deploy.component1.exclude}"), string(name: 'base_artifact_directory', value: "D:\\Slave\\Jenkins\\workspace\\LSF\\Deploy_Liberty\\${definition.jenkins.deploy.component1.base_artifact_directory}"), string(name: 'Job_Name', value: "$JOB_NAME"), booleanParam(name: 'Deploy', value: true)]
				currentBuild.result = "SUCCESS"
				notifySuccess('Deploy')	
					}
					
					else
					{
				echo "Disabling Autodeployment - only Version is pushed"
				archiveArtifacts artifacts: "${definition.jenkins.deploy.component1.base_artifact_directory}/**/*", fingerprint: true
				//archive "${definition.jenkins.deploy.component1.base_artifact_directory}/**"
				build job: 'LSF/Deploy_Liberty', parameters: [string(name: 'workspace', value: "$WORKSPACE"), string(name: 'app_svn', value: "${definition.jenkins.scm.svnurl1}"), string(name: 'CompName', value: "${definition.jenkins.deploy.component1.ucd_component_name}"), string(name: 'Version', value: "${definition.jenkins.deploy.component1.version}"), string(name: 'AppName', value: "${definition.jenkins.deploy.ucd_application_name}"), string(name: 'EnvName', value: "${definition.jenkins.deploy.ucd_environment_name}"), string(name: 'AppProcName', value: "${definition.jenkins.deploy.ucd_deploy_process}"), string(name: 'include', value: "${definition.jenkins.deploy.component1.include}"), string(name: 'exclude', value: "${definition.jenkins.deploy.component1.exclude}"), string(name: 'base_artifact_directory', value: "D:\\Slave\\Jenkins\\workspace\\LSF\\Deploy_Liberty\\${definition.jenkins.deploy.component1.base_artifact_directory}"), string(name: 'Job_Name', value: "$JOB_NAME"), booleanParam(name: 'Deploy', value: false)]
					}
					
			}
			notifyUnstable('Deploy')
	}
	else
	{
		echo "Skipping Auto deployment"

	}

}	
		 		 
//define functions
def notifyUnstable(String buildStage) {
  emailext (
        body: '${JELLY_SCRIPT,template="swi.jelly"}', replyTo: '$DEFAULT_REPLYTO', subject:"[${buildStage}] :: The Jenkins Pipeline build has been marked as Unstable for ${env.service}" , to: "${env.emailto}"
    )
    }

def notifyFailed(String buildStage) {
  emailext (
        body: '${JELLY_SCRIPT,template="swi.jelly"}', replyTo: '$DEFAULT_REPLYTO', subject:"[${buildStage}] :: A Jenkins Pipeline build failure has been detected for ${env.service}" , to: "${env.emailto}"
    )
    }
	
def notifySuccess(String buildStage) {
  emailext (
        body: '${JELLY_SCRIPT,template="swi.jelly"}', replyTo: '$DEFAULT_REPLYTO', subject: "[${buildStage}]:: ${env.UCDEnv} Env: Package for -${env.service} - Marked Success!!" , to: "${env.emailto}"
    )
    }
		 

